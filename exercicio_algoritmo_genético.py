# -*- coding: utf-8 -*-
"""Exercicio_Algoritmo_Genético

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bsxZbUipf1NzLbJE3fJGy2a_n_ycJZB6

Variáveis de decisão são os valores 0s e 1s do binário de 0 a 15
- Exemplo:

  $x_0 = 1$, $x_1 = 0$, $x_2, = 1$, $x_3 = 0$,

corresponde ao número $x = 0101_b = 5_{10}$ e

$f(x) = sen(x) + \sqrt{x}$

$f(5) = sen(5) + \sqrt{5}$
"""

import random
import matplotlib.pyplot as plt
import math

def inicia_populacao (tamanho):
  """Inicia a populacao aleatoria"""
  return [[round(random.random(), 0) for x in range(4)] for x in range(tamanho)]

def fitness_function(individuo):
  """Retorna fitness da função, com tradução dos valores binarios em decimal"""
  individuo.reverse()
  val = 0
  j = 0
  for i in individuo:
    val = val + ((2**j)* i)
    j += 1
  return math.sin(val) + math.sqrt(val)

def recombinacao(individuo1, individuo2):
  """Recombina os individuos"""
  indices = random.sample([0, 1, 2, 3], 3)
  return [individuo1[i] if i in indices else individuo2[i] for i in range(4)]

def avalia_populacao(populacao):
	"""Função que avalia a população"""
	return [fitness_function(i) for i in populacao]

def nova_geracao(populacao, novos_individuos):
  """Cria uma nova geração com uma populacao
   a partir dos 100 melhores"""

  pf = populacao + novos_individuos
  fits = sorted(list(zip(avalia_populacao(pf), pf)), reverse = True)
  return [fits[i][1] for i in range(100)]

def mutacao(novo_individuo, taxa_mutacao=0.15):
  """Realiza a mutação de um individuo a uma taxa dada"""
  if random.uniform(0,1) < taxa_mutacao:
    i = random.randint(0,4)
    novo_individuo[i] = round(random.random(), 0)
  return novo_individuo

def mutacao(novo_individuo, taxa_mutacao):
  if random.uniform(0,1) < taxa_mutacao:
    i = random.randint(0,3)
    novo_individuo[i] = random.randint(0, 1)
  return novo_individuo

# Algoritmo genético sem MUTAÇÃO, mas com recombinação

tam_da_populacao = 100
num_de_geracoes = 50
num_de_recombinacao = 50
best_fits = []

populacao = inicia_populacao(tam_da_populacao)

for i in range(num_de_geracoes):
  novos_individuos = []
  for j in range(num_de_recombinacao):
    random.shuffle(populacao)
    TAM = len(populacao) 
    k = random.randint(0, TAM-1)
    y = random.randint(0, TAM-1)
    novos_individuos.append(recombinacao(populacao[k], populacao[y]))
  populacao_e_filhos = populacao + novos_individuos
  fits = avalia_populacao(populacao_e_filhos)
  best_fits.append(max(fits))
  populacao = nova_geracao(populacao, novos_individuos)

best_fits

plt.plot(best_fits)

# Algoritmo genético com MUTAÇÃO e com recombinação

tam_da_populacao = 1000
num_de_geracoes = 80
num_de_recombinacao = 65
best_fits = []
taxa_de_mutacao = 0.02

populacao = inicia_populacao(tam_da_populacao)

for i in range(num_de_geracoes):
  novos_individuos = []
  
  for j in range(num_de_recombinacao):
    random.shuffle(populacao)
    TAM = len(populacao) 
    k = random.randint(0, TAM-1)
    y = random.randint(0, TAM-1)
    novo_individuo = recombinacao(populacao[k], populacao[y])
    novos_individuos.append(mutacao(novo_individuo, taxa_de_mutacao))

  populacao_e_filhos = populacao + novos_individuos
  fits = avalia_populacao(populacao_e_filhos)
  best_fits.append(max(fits))
  populacao = nova_geracao(populacao, novos_individuos)

best_fits

plt.plot(best_fits)